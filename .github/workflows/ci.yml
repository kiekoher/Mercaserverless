name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 5 * * 1'

jobs:
  audit:
    name: "Audit Dependencies"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run npm audit
        run: npm audit --omit=dev --audit-level=high
      - name: Check outdated dependencies
        run: npm outdated || true
      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
      - name: Ping Cron Monitor on Success
        # This step acts as a "dead man's switch" for the scheduled job.
        # It pings an external monitoring service to confirm the job ran successfully.
        # If the service doesn't receive a ping, it will trigger an alert.
        #
        # TO ENABLE:
        # 1. Create a "check" in a service like https://healthchecks.io or https://cronitor.io
        # 2. Get the unique ping URL provided by the service.
        # 3. Create a new repository secret named CRON_MONITOR_URL with the ping URL as its value.
        if: success() && github.event_name == 'schedule' && secrets.CRON_MONITOR_URL
        run: |
          echo "Pinging cron monitoring service..."
          curl -fsS -m 10 --retry 5 ${{ secrets.CRON_MONITOR_URL }} || echo "Cron monitor ping failed. This is non-critical."
  lint:
    name: "Lint Code"
    runs-on: ubuntu-latest
    needs: audit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint

  jest-tests:
    name: "Run Jest Unit Tests"
    runs-on: ubuntu-latest
    needs: audit
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run Jest tests
        run: npm test
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: "https://example.supabase.co"
          NEXT_PUBLIC_SUPABASE_ANON_KEY: "example-anon-key"
          SUPABASE_SERVICE_KEY: "example-service-key"
          GEMINI_API_KEY: "example-gemini-key"
          GOOGLE_MAPS_API_KEY: "example-maps-key"
          UPSTASH_REDIS_REST_URL: "https://example-redis.upstash.io"
          UPSTASH_REDIS_REST_TOKEN: "example-rest-token"
          HEALTHCHECK_TOKEN: "test-token"
          LOGTAIL_SOURCE_TOKEN: ""
          RATE_LIMIT_FAIL_OPEN: "true"

  cypress-tests:
    name: "Run Cypress E2E Tests"
    runs-on: ubuntu-latest
    needs: [lint, jest-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Install dependencies
        run: npm ci

      - name: Push DB migrations to test database
        run: |
          echo "Pushing migrations to test DB..."
          supabase db push --password ${{ secrets.CYPRESS_SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_URL: ${{ secrets.CYPRESS_SUPABASE_DB_URL }}

      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm start
        env:
          # Estas variables ahora deben estar configuradas como Secretos en el repositorio de GitHub
          # con el prefijo CYPRESS_ para distinguirlas de las de producci√≥n.
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.CYPRESS_NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.CYPRESS_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_KEY: ${{ secrets.CYPRESS_SUPABASE_SERVICE_KEY }}
          GEMINI_API_KEY: ${{ secrets.CYPRESS_GEMINI_API_KEY }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.CYPRESS_GOOGLE_MAPS_API_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.CYPRESS_UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.CYPRESS_UPSTASH_REDIS_REST_TOKEN }}
          HEALTHCHECK_TOKEN: "test-token"
          LOGTAIL_SOURCE_TOKEN: ""
          RATE_LIMIT_FAIL_OPEN: "true"
          NEXT_PUBLIC_BYPASS_AUTH_FOR_TESTS: "true"

  deploy:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: [lint, jest-tests, cypress-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Vercel Production
        uses: vercel/vercel-action@v3
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"
