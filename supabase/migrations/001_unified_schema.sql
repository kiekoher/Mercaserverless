-- ========= SCRIPT PARA BORRAR TODO =========
-- FROM APPENDIX A

-- Eliminar el trigger que depende de la función para evitar errores de dependencia
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Eliminar tablas (en orden de dependencia)
DROP TABLE IF EXISTS public.visitas;
DROP TABLE IF EXISTS public.rutas;
DROP TABLE IF EXISTS public.puntos_de_venta;
DROP TABLE IF EXISTS public.profiles;

-- Eliminar funciones
DROP FUNCTION IF EXISTS public.get_todays_route_for_user(text);
DROP FUNCTION IF EXISTS public.get_todays_route_for_user(uuid);
DROP FUNCTION IF EXISTS public.get_dashboard_stats();
DROP FUNCTION IF EXISTS public.get_my_role();
DROP FUNCTION IF EXISTS public.handle_new_user();

-- Eliminar tipos personalizados
DROP TYPE IF EXISTS public.app_role;


-- ========= SCRIPT ÚNICO PARA CREAR TODA LA ESTRUCTURA DE PRODUCCIÓN =========
-- FROM APPENDIX B

-- ========= Parte 1: Tablas Principales =========

-- Tabla para Puntos de Venta (con coordenadas para mapas)
CREATE TABLE public.puntos_de_venta (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  nombre TEXT NOT NULL,
  direccion TEXT,
  ciudad TEXT,
  latitud REAL,
  longitud REAL
);
COMMENT ON TABLE public.puntos_de_venta IS 'Almacena los puntos de venta a visitar, incluyendo coordenadas.';

-- Tipo para Roles de Usuario
CREATE TYPE public.app_role AS ENUM ('supervisor', 'mercaderista', 'admin');

-- Tabla para Perfiles de Usuario
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  updated_at TIMESTAMPTZ,
  full_name TEXT,
  role app_role NOT NULL DEFAULT 'mercaderista'
);
COMMENT ON TABLE public.profiles IS 'Información de perfil público para cada usuario.';

-- Tabla para Rutas
CREATE TABLE public.rutas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  fecha DATE NOT NULL,
  mercaderista_id UUID REFERENCES public.profiles(id),
  puntos_de_venta_ids BIGINT[] NOT NULL
);
COMMENT ON TABLE public.rutas IS 'Almacena las rutas diarias para cada mercaderista.';

-- Tabla para Visitas (Seguimiento y Feedback)
CREATE TABLE public.visitas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  ruta_id BIGINT REFERENCES public.rutas(id) ON DELETE CASCADE,
  punto_de_venta_id BIGINT REFERENCES public.puntos_de_venta(id) ON DELETE CASCADE,
  mercaderista_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE,
  check_in_at TIMESTAMPTZ,
  check_out_at TIMESTAMPTZ,
  estado TEXT DEFAULT 'Pendiente' NOT NULL, -- Estados: Pendiente, En Progreso, Completada, Incidencia
  observaciones TEXT,
  url_foto TEXT
);
COMMENT ON TABLE public.visitas IS 'Registra cada visita, su estado y el feedback del mercaderista.';

-- ========= Parte 2: Funciones y Triggers =========

-- Trigger para crear un perfil automáticamente para nuevos usuarios
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$
BEGIN
  INSERT INTO public.profiles (id, role)
  VALUES (new.id, 'mercaderista');
  RETURN new;
END;
$$;

-- Vincular el trigger a la tabla de usuarios de Supabase
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Función auxiliar para obtener el rol del usuario actual
CREATE OR REPLACE FUNCTION public.get_my_role()
RETURNS public.app_role LANGUAGE sql SECURITY DEFINER SET search_path = public AS $$
  SELECT role FROM public.profiles WHERE id = auth.uid();
$$;

-- Función para obtener la ruta del día de un usuario
CREATE OR REPLACE FUNCTION get_todays_route_for_user(p_user_id UUID)
RETURNS JSON LANGUAGE plpgsql AS $$
DECLARE
  route_data JSON;
BEGIN
  SELECT
    json_build_object(
      'id', r.id,
      'fecha', r.fecha,
      'mercaderista_id', r.mercaderista_id,
      'puntos', (
        SELECT json_agg(
          json_build_object('id', pdv.id, 'nombre', pdv.nombre, 'direccion', pdv.direccion)
        )
        FROM public.puntos_de_venta pdv
        WHERE pdv.id = ANY(r.puntos_de_venta_ids)
      )
    )
  INTO route_data
  FROM public.rutas r
  WHERE r.mercaderista_id = p_user_id AND r.fecha = CURRENT_DATE;
  RETURN route_data;
END;
$$;

-- Función para obtener estadísticas del dashboard
CREATE OR REPLACE FUNCTION get_dashboard_stats()
RETURNS JSON LANGUAGE sql AS $$
  SELECT json_build_object(
    'total_rutas', (SELECT COUNT(*) FROM public.rutas),
    'total_puntos_visitados', (SELECT COALESCE(SUM(array_length(puntos_de_venta_ids, 1)), 0) FROM public.rutas),
    'rutas_por_mercaderista', (
      SELECT json_agg(json_build_object('mercaderista', mercaderista_id, 'total_rutas', count))
      FROM (
        SELECT mercaderista_id, COUNT(*) as count
        FROM public.rutas
        GROUP BY mercaderista_id
        ORDER BY count DESC
      ) as subquery
    )
  );
$$;

-- ========= Parte 3: Seguridad a Nivel de Fila (RLS) =========

-- Habilitar RLS en todas las tablas
ALTER TABLE public.puntos_de_venta ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.rutas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.visitas ENABLE ROW LEVEL SECURITY;

-- Políticas para 'puntos_de_venta'
CREATE POLICY "Allow authenticated read access" ON public.puntos_de_venta FOR SELECT USING (auth.role() = 'authenticated');
CREATE POLICY "Allow supervisors and admins to insert" ON public.puntos_de_venta FOR INSERT WITH CHECK (get_my_role() IN ('supervisor', 'admin'));

-- Políticas para 'rutas'
CREATE POLICY "Allow assigned or privileged read access" ON public.rutas
  FOR SELECT
  USING (
    auth.uid() = mercaderista_id OR get_my_role() IN ('supervisor', 'admin')
  );
CREATE POLICY "Allow supervisors and admins to insert" ON public.rutas FOR INSERT WITH CHECK (get_my_role() IN ('supervisor', 'admin'));

-- Políticas para 'profiles'
CREATE POLICY "Users can view their own profile" ON public.profiles FOR SELECT USING (auth.uid() = id);
CREATE POLICY "Users can update own profile" ON public.profiles FOR UPDATE USING (auth.uid() = id);
CREATE POLICY "Admins can view all profiles" ON public.profiles FOR SELECT USING (get_my_role() = 'admin');
CREATE POLICY "Admins can update any profile" ON public.profiles FOR UPDATE USING (get_my_role() = 'admin');

-- Políticas para 'visitas'
CREATE POLICY "Users can see their own visits" ON public.visitas FOR SELECT USING (auth.uid() = mercaderista_id);
CREATE POLICY "Users can insert their own visits" ON public.visitas FOR INSERT WITH CHECK (auth.uid() = mercaderista_id);
CREATE POLICY "Users can update their own visits" ON public.visitas FOR UPDATE USING (auth.uid() = mercaderista_id);
CREATE POLICY "Supervisors and admins can see all visits" ON public.visitas FOR SELECT USING (get_my_role() IN ('supervisor', 'admin'));
