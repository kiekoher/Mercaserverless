-- Create the table for points of sale
CREATE TABLE public.puntos_de_venta (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  nombre TEXT NOT NULL,
  direccion TEXT,
  ciudad TEXT
);

-- Add comments to the table
COMMENT ON TABLE public.puntos_de_venta IS 'Stores the points of sale to be visited.';

-- Enable Row-Level Security
ALTER TABLE public.puntos_de_venta ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows authenticated users to read all points of sale
CREATE POLICY "Allow authenticated read access" ON public.puntos_de_venta
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- Create a policy that allows authenticated users to insert new points of sale
CREATE POLICY "Allow authenticated insert access" ON public.puntos_de_venta
  FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');


-- Create the table for routes
CREATE TABLE public.rutas (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  fecha DATE NOT NULL,
  mercaderista_id TEXT NOT NULL,
  puntos_de_venta_ids BIGINT[] NOT NULL
);

-- Add comments to the table
COMMENT ON TABLE public.rutas IS 'Stores the daily routes for each merchandiser.';

-- Enable Row-Level Security
ALTER TABLE public.rutas ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows authenticated users to read all routes
CREATE POLICY "Allow authenticated read access" ON public.rutas
  FOR SELECT
  USING (auth.role() = 'authenticated');

-- Create a policy that allows authenticated users to insert new routes
CREATE POLICY "Allow authenticated insert access" ON public.rutas
  FOR INSERT
  WITH CHECK (auth.role() = 'authenticated');


-- Create an RPC function to get today's route for a specific user
CREATE OR REPLACE FUNCTION get_todays_route_for_user(p_user_id TEXT)
RETURNS JSON
LANGUAGE plpgsql
AS $$
DECLARE
  route_data JSON;
BEGIN
  SELECT
    json_build_object(
      'id', r.id,
      'fecha', r.fecha,
      'mercaderista_id', r.mercaderista_id,
      'puntos', (
        SELECT json_agg(
          json_build_object(
            'id', pdv.id,
            'nombre', pdv.nombre,
            'direccion', pdv.direccion
          )
        )
        FROM public.puntos_de_venta pdv
        WHERE pdv.id = ANY(r.puntos_de_venta_ids)
      )
    )
  INTO route_data
  FROM public.rutas r
  WHERE r.mercaderista_id = p_user_id AND r.fecha = CURRENT_DATE;

  RETURN route_data;
END;
$$;

-- Create an RPC function to get dashboard statistics
CREATE OR REPLACE FUNCTION get_dashboard_stats()
RETURNS JSON
LANGUAGE sql
AS $$
  SELECT json_build_object(
    'total_rutas', (SELECT COUNT(*) FROM public.rutas),
    'total_puntos_visitados', (SELECT SUM(array_length(puntos_de_venta_ids, 1)) FROM public.rutas),
    'rutas_por_mercaderista', (
      SELECT json_agg(json_build_object('mercaderista', mercaderista_id, 'total_rutas', count))
      FROM (
        SELECT mercaderista_id, COUNT(*) as count
        FROM public.rutas
        GROUP BY mercaderista_id
        ORDER BY count DESC
      ) as subquery
    )
  );
$$;
