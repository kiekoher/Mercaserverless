# See https://www.nginx.com/resources/wiki/start/topics/examples/full/
# See https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/

# Number of worker processes depends on the number of cores.
# 'auto' is a good default.
worker_processes auto;

# Log errors to stderr. The container's log driver will handle them.
error_log /dev/stderr warn;

events {
    # The maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    # Define the location of log files.
    # We send them to stdout/stderr to be handled by the Docker logging driver.
    access_log /dev/stdout;
    error_log /dev/stderr;

    # Hide Nginx version information.
    server_tokens off;

    # Set a timeout for reading the client request body.
    client_body_timeout 10s;
    # Set a timeout for reading the client request header.
    client_header_timeout 10s;
    # Set a timeout for transmitting a response to the client.
    send_timeout 10s;

    # Enable Gzip compression.
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Define the 'upstream' for our Next.js application.
    # 'app' is the service name in docker-compose.prod.yml.
    upstream nextjs_app {
        server app:3000;
    }

    # HTTP server block to handle incoming requests on port 80.
    # It redirects all HTTP traffic to HTTPS and handles Let's Encrypt challenges.
    server {
        listen 80;
        server_name _; # Catches all hostnames

        # Route for Let's Encrypt certificate renewal challenges.
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS.
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS server block to handle incoming requests on port 443.
    server {
        listen 443 ssl http2;
        server_name _; # Catches all hostnames

        # SSL Certificate paths. These will be managed by Certbot.
        # IMPORTANT: Replace example.com with your actual domain during setup.
        ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;

        # Modern, secure SSL configuration.
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Add HSTS header to force HTTPS on the client side.
        # The 'preload' directive can be added after confirming site stability.
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";

        # Security headers as a defense-in-depth measure.
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        # Proxy all requests to the Next.js upstream.
        location / {
            proxy_pass http://nextjs_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}
